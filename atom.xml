<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Steven Brooks' Blog]]></title>
  <link href="http://stevenabrooks.github.io/atom.xml" rel="self"/>
  <link href="http://stevenabrooks.github.io/"/>
  <updated>2013-06-18T21:58:43-04:00</updated>
  <id>http://stevenabrooks.github.io/</id>
  <author>
    <name><![CDATA[Steven Brooks]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Baseball Is a Game of Pixels]]></title>
    <link href="http://stevenabrooks.github.io/blog/2013/06/18/baseball/"/>
    <updated>2013-06-18T18:22:00-04:00</updated>
    <id>http://stevenabrooks.github.io/blog/2013/06/18/baseball</id>
    <content type="html"><![CDATA[<p>When I started coming up with ideas for this post I began by thinking about my specific issues in the code I have written to date (12 days) and the concepts that would help with those issues.  One of the issues I had was keeping track of all my methods/variables early on and trying to find where each method/variable was coming from and what information it was giving.  I then wanted to see if I could come up with plugins for Sublime 2 that would paint a background color pasted behind each variable/method as well as where else it would be in the code, and that background color would stay there as long as you wanted.  This is different than Sublime circling the words or phrases you click on.  Eventually I ran this by a classmate who tore down the idea so I will not be writing about that.</p>

<p>Over lunch on Tuesday I was speaking to two classmates about some of the things I did as an athlete and baseball player and was telling them that it was amazing how many similarities there were between being a baseball player and a programmer.  I&rsquo;d like to introduce you to some of them:</p>

<h3>It&rsquo;s Not Boring</h3>

<p>Baseball, like programming, seems to be doing the same thing over and over again, which is why people perceive it to be boring, but that&rsquo;s really just to the untrained eye.  In baseball, you play the game with the same rules each day and as a hitter you hit against a pitcher every day.  But every day is a new game and again a new pitcher or set of pitchers.  The same macro level things occur daily in games but the fine elements of the game change every day.</p>

<p>Programming is very similar where for the most part you are coding in a computer every day, but you are not writing the same code each and every day.  Each day brings new tasks, errors, and goals.</p>

<h3>Be Comfortable With Discomfort</h3>

<p>Being the batter in the 9th inning of the ACC Baseball Championship Game with the bases loaded where your team is down by one run and the opponent has their best pitcher throwing against you in front of thousands of people is not comfortable.  Period.  Writing dozens of lines of code only to find out none of it works when you have a deadline in five minutes and you have no idea what the error message in Terminal is telling you is not comfortable.</p>

<p>Discomfort is part of the game in baseball and programming.  As a baseball player I was at my best when I accepted these situations as part of my role and became comfortable with discomfort.  The same goes for good programmers, they must be comfortable with discomfort and realize that creating code that doesn&rsquo;t work as well as not knowing how to do certain things is part of the role.</p>

<h3>Breaking Things Down</h3>

<p>As I have learned first hand in my first twelve days as a programmer, programs have many many parts.  The same goes for a swing in baseball.  In a swing, there are many, many, many, many smaller parts that create the whole swing just as there are many, many, many, many smaller parts that create an entire program.</p>

<p>In both scenarios, the key is to break down the whole into smaller and more manageable parts so when something goes wrong, it is easier to pinpoint error.  In baseball if a player happens to be lunging forward before he swings rather than trying to say the entire swing is a mess he may pick a smaller part in his swing.  Looking at something like film could help the player pinpoint the smaller issue.  Typically, if a player is lunging in the batters box then their is an issue with his head (interestingly enough).</p>

<p>This scenario arrises in code as well.  If a programmer is trying to run code and an error pops up it would not be wise to suggest the entire program is wrong and throw it away.  Looking at the error messages that come up will allow the programmer to pinpoint the issue down to a smaller aspect rather than the entire code.</p>

<h3>Practice &amp; Adapting</h3>

<p>If you don&rsquo;t use it you lose it.  Yes, you do.  Everybody wants to hit home runs, but you won&rsquo;t even be put into the starting lineup unless you practice your craft and are always improving.  If you are not always trying to make yourself better, you are getting worse and there really isn&rsquo;t anything in between.</p>

<p>As programmers, the more code we write, the more familiar we become with things such as syntax, and the better we become at coding.  You also won&rsquo;t be able to make Facebook if you don&rsquo;t know the basics and whatever else goes into making Facebook.  Its just like the more batting practice a baseball player takes the better he becomes (in theory).</p>

<p>Both professionals also require adaptation.  Ever since technology began to play in integral role in baseball players have had to adapt more frequently and in shorter times.  The information the teams can get and store on individual players in astonishing.  Every at bat I had starting in college was tracked to the &ldquo;T&rdquo;.  Every opponent knew about each of those at bats and would pitch me a certain according to my perceived weaknesses.  As a player I needed to adapt to those changes and work on my weak points.  Once I got better at those first weak points others would arise and would begin the cycle again.  If I was unable to adapt quickly, I would have been no good.</p>

<p>While improving on weak point in programming is important, it is also equally important to be able to move with the times.  I say this as far an new languages, technologies, updates, etc.  I am currently running Ruby 1.9.3 but I am willing to bet that soon I will need to use a newer version and quickly learn the differences in the newest version and be able to implement them.  And after that I&rsquo;m sure a newer version of something will have come out by then and I will have to repeat the cycle.</p>

<p>There are some others things such as preparation and teamwork that are very similar between the two.  But there are definitely some surprising similarities if you ask me.  Who would have thought these two people were so similar?</p>

<p><img src="http://s3.amazonaws.com/crunchbase_prod_assets/assets/images/resized/0001/0688/10688v39-max-250x250.jpg" alt="Zuckerberg" />  <img src="http://www.3dmusclejourney.com/resources/mcgwire_creatine%20article.jpg?timestamp=1311286970851" alt="baseball player" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing Ruby]]></title>
    <link href="http://stevenabrooks.github.io/blog/2013/06/15/testing-ruby/"/>
    <updated>2013-06-15T15:31:00-04:00</updated>
    <id>http://stevenabrooks.github.io/blog/2013/06/15/testing-ruby</id>
    <content type="html"><![CDATA[<p>I was quickly drawn to <a href="https://speakerdeck.com/duien/testing-ruby">&ldquo;Testing Ruby&rdquo;</a>  by Emily Price because as a rookie programmer I have come to realize that things such as planning and testing are very important.</p>

<p><img src="http://stevenabrooks.github.io/images/Screen3.png" alt="Ruby Testing" /></p>

<p>She writes that testing does many things for a programmer including:</p>

<ol>
<li>Ensuring the code is correct</li>
<li>Promoting good practice</li>
<li>Giving reference to how to code actually works.</li>
</ol>


<p>In the first two weeks at Flatiron School, testing out my code before moving on has become very important.  If I can know for certain that a method works (by testing), I never have to worry about that method later on in my program.  It seems like such a simple idea but it was only something I found important after writing dozens of lines of code and realizing one of the first few lines did not work.</p>

<p>One pointer that Price writes about that I learned was to:</p>

<ol>
<li>Write your test first</li>
</ol>


<p>This is something that I can see would be very useful.  At this point in my programming career I am just learning how to do that so this slideshow comes at a good time for me.</p>

<p>Some of the things I thought of during my first two weeks as a programmer that she brought up were:</p>

<ol>
<li>Get instant notification when you have an issue</li>
<li>Write as little code as possible to test</li>
</ol>


<p>As my skills as a programmer grow, I would like to be able to create some sort of a process in which I develop certain ways to test my code to find errors as soon as I can.</p>

<p>Price also has a <a href="https://speakerdeck.com/duien/git-an-introduction">Git Introduction</a> slideshow on <a href="https://speakerdeck.com">speakerdeck</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pretty Juiced About the Work I Did Last Night]]></title>
    <link href="http://stevenabrooks.github.io/blog/2013/06/11/post-number-2/"/>
    <updated>2013-06-11T08:45:00-04:00</updated>
    <id>http://stevenabrooks.github.io/blog/2013/06/11/post-number-2</id>
    <content type="html"><![CDATA[<p>This morning will be the seventh day of The Flatiron School.  Yesterday (the sixth day) was by far the most challenging day for me.  Yesterday we were introduced to many new things in the ruby language and it became a lot to comprehend all at once.  As yesterday was seemingly overwhelming, it became very clear to me that no matter what the issue, the process becomes very important.</p>

<p>We were given a homework assignment to create a basketball game with the following guidelines:</p>

<p><img src="http://stevenabrooks.github.io/images/Screen1.png" alt="homework guidelines" /></p>

<p>For my seventh day, this assignment also felt overwhelming.  Luckily for me (some would say), I have an hour long bus commute going home so it was a great opportunity to do some reading on hashes (which is how we were supposed to create this data).</p>

<p>While this feels like a lot of information for me (or at least it did), remembering the process became key (play on word).  I chose to begin by planning out everything and talking myself through what these hashes would visually look like.  Eventually I was able to visualize these hashes as simple numbered lists:</p>

<p><img src="http://3.bp.blogspot.com/-wk8cXlINClk/UTBiAHyIO0I/AAAAAAAAA3g/qu3POwCibd0/s1600/03-Finished+Multilevel+List.png" alt="numbered list" /></p>

<p>Eventually, my code ended up looking something like this (which I&rsquo;m very proud of):</p>

<p><img src="http://stevenabrooks.github.io/images/Screen2.png" alt="my code" /></p>

<p>I am very happy with what I did on this homework assignment as I successfully took a large project and was able to plan out my execution well and break it down into smaller parts.</p>

<p>Later on in the assignment I was asked to make calls to the hash $basketball_game which maybe I&rsquo;ll talk about in another post.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blog Post 1.0]]></title>
    <link href="http://stevenabrooks.github.io/blog/2013/06/09/hello-world/"/>
    <updated>2013-06-09T17:51:00-04:00</updated>
    <id>http://stevenabrooks.github.io/blog/2013/06/09/hello-world</id>
    <content type="html"><![CDATA[<p>I&rsquo;m excited to begin blogging about my experience in learning to become a programmer and especially my experience as a student at The Flatiron School.</p>

<p>I&rsquo;d like to write these posts and have this blog tailored to a wide variety of people ranging from someone who has no programming knowledge to those who are masters in the field (I&rsquo;m sure once my development skills and vocabulary grow a good number of these posts will begin to be more technical.)  I can promise this specific blog will be different than other blogs built by programmers because I believe my background is very unique to this field.  While my fellow classmates come from many different background ranging from professional skydivers to accountants at Goldman Sachs, the only job I&rsquo;ve had has been as a professional baseball player.  One the other side of the coin I cannot promise that I will have perfect grammar or that I will not curse from time to time.</p>

<p>I&rsquo;d also like to thank Max Jacobson (a fellow classmate) for helping me in debugging issues to set up this blog to my Github account.</p>

<p>To be continued&hellip;</p>
]]></content>
  </entry>
  
</feed>
