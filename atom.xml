<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Steven Brooks' Blog]]></title>
  <link href="http://stevenabrooks.github.io/atom.xml" rel="self"/>
  <link href="http://stevenabrooks.github.io/"/>
  <updated>2014-01-14T16:53:02-05:00</updated>
  <id>http://stevenabrooks.github.io/</id>
  <author>
    <name><![CDATA[Steven Brooks]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[15 Second Heroku Wait?]]></title>
    <link href="http://stevenabrooks.github.io/blog/2014/01/14/heroku-schedule/"/>
    <updated>2014-01-14T10:23:00-05:00</updated>
    <id>http://stevenabrooks.github.io/blog/2014/01/14/heroku-schedule</id>
    <content type="html"><![CDATA[<p>Here is the scenario you are in. You built a Rails app.  Congrats.  You have also pushed you app to <a href="http://heroku.com/">Heroku</a>.  Even better.  But after every hour, your Heroku server is seemingly shut down; that&rsquo;s why it can be free because it&rsquo;s not always &ldquo;in use&rdquo;.</p>

<p>There&rsquo;s an easy way to combat that for free.</p>

<p>1) Make a rake task that will &ldquo;ping&rdquo; your site.</p>

<figure class='code'><figcaption><span> (update.rb)</span> <a href='http://stevenabrooks.github.io/downloads/code/update.rb'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">desc</span> <span class="s2">&quot;Pings PING_URL to keep a dyno alive&quot;</span>
</span><span class='line'><span class="n">task</span> <span class="ss">:dyno_ping</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">require</span> <span class="s2">&quot;net/http&quot;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="n">uri</span> <span class="o">=</span> <span class="no">URI</span><span class="p">(</span><span class="s2">&quot;YOUR SITE&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">response</span> <span class="o">=</span> <span class="ss">Net</span><span class="p">:</span><span class="ss">:HTTP</span><span class="o">.</span><span class="n">get_response</span><span class="p">(</span><span class="n">uri</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>2) Install <a href="https://scheduler.heroku.com">Heroku Scheduler</a> and set have it run the rake task every hour.</p>

<p>That&rsquo;s it.  Now every time you go to your site you won&rsquo;t have to wait 15 second for it to load.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Open Source]]></title>
    <link href="http://stevenabrooks.github.io/blog/2014/01/13/stubhub/"/>
    <updated>2014-01-13T09:25:00-05:00</updated>
    <id>http://stevenabrooks.github.io/blog/2014/01/13/stubhub</id>
    <content type="html"><![CDATA[<p>This is a teaser post.  For the last few days I have been using a pretty popular ruby gem that was not working correctly.  With the help of a few people, I was able to find the error, make the correction, and write a passing test for the new code.  I have sent a pull request and hopefully it is accepted.  If it is I will write about it.  Could be my first open source commit.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Angular on Rails]]></title>
    <link href="http://stevenabrooks.github.io/blog/2014/01/07/angular/"/>
    <updated>2014-01-07T09:25:00-05:00</updated>
    <id>http://stevenabrooks.github.io/blog/2014/01/07/angular</id>
    <content type="html"><![CDATA[<p>This post will show a step by step tutorial of how to create a rails app with Angular.js on the front-end and allow you to successfully create an object and view those objects.</p>

<p>First, lets create the rails app</p>

<p><code>rails new angular</code></p>

<p>After you <code>cd</code> into the app, we are going to create a resource for the model we are going to have.  A resource will provide you with the model, an empty controller, a views folder with no views, and resourced routes for that model.  Close to scaffolding but not really.  Lets make a user model and give it a name:</p>

<p><code>rails g resource user name</code></p>

<p>and don&rsquo;t forget to migrate the database.</p>

<p><code>rake db:migrate</code></p>

<p>Next we have to create a controller with just an index action because the entire app will take place in that single action.  Lets call the controller home.</p>

<p><code>rails g controller home index</code></p>

<p>Next we have to remove the public/index.html file and make sure to add the home#index route as your root route:</p>

<p><code>root :to => &ldquo;home#index&rdquo;</code></p>

<p>Remember that empty user controller?  We have to go back to it now and create the RESTful data source for our app to interact with.  It&rsquo;s really not too too crazy.  For the purposed of this app we are only going to have an index action and a create action:</p>

<figure class='code'><figcaption><span> (AngularController.rb)</span> <a href='http://stevenabrooks.github.io/downloads/code/AngularController.rb'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">UsersController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="n">respond_to</span> <span class="ss">:json</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>    <span class="n">respond_with</span> <span class="no">User</span><span class="o">.</span><span class="n">all</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>    <span class="n">respond_with</span> <span class="no">User</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:user</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we need to add Angular.js to the app.  In your Gemfile, and in the assets group, we need to add the Angular.js gem:</p>

<p><code>gem &lsquo;angularjs-rails&rsquo;</code></p>

<p>And in our application.js file, we need to add the following lines:</p>

<p><code>//= require angular</code><br>
<code>//= require angular-resource</code></p>

<p>Awesome, were doing pretty well thus far.  Next we have to tell our app &ldquo;Hey, you need to be in Angular.js&rdquo;, so go over to your application layout file and look for your html tag.  We need to add something to this tag to tell the app it&rsquo;s going to be in Angular.  For this we do the following:</p>

<p><code>html ng-app</code></p>

<p>This directive is used to flag the html element and tell it that Angular should be considered the root element of our application.  You can add a directive like this to other elements in your app if you wish to not have the entire app be Angular.</p>

<p>That is your basic setup.  We have Angular in our app and our html elements is ready.</p>

<p>Now we have a view.  I&rsquo;m going to show the view and then talk about whats going on here:</p>

<figure class='code'><figcaption><span> (angularview.html)</span> <a href='http://stevenabrooks.github.io/downloads/code/angularview.html'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">ng-controller=</span><span class="s">&quot;UserController&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;ul&gt;</span>
</span><span class='line'>    <span class="nt">&lt;li</span> <span class="na">ng-repeat=</span><span class="s">&quot;user is users&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      {{ user.name }}
</span><span class='line'>    <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'>  <span class="nt">&lt;form&gt;</span>
</span><span class='line'>    <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">ng-model=</span><span class="s">&quot;newUser.name&quot;</span> <span class="na">placeholder=</span><span class="s">&quot;name&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;button</span> <span class="na">ng-click=</span><span class="s">&quot;addUser()&quot;</span><span class="nt">&gt;</span>Add User<span class="nt">&lt;/button&gt;&lt;br&gt;</span>
</span><span class='line'>    <span class="nt">&lt;span&gt;</span>{{newUser.name}}<span class="nt">&lt;/span&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/form&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>At the top of the view we have:</p>

<p><code>div ng-controller=&ldquo;UserController&rdquo;</code></p>

<p>Eventually, we will create an Angular controller, and what we are doing here is saying, &ldquo;Anything in this div refers to the UserController&rdquo;.  We are then creating a list, and each list item has the following code attached:</p>

<p><code>li ng-repeat=&ldquo;user in users&rdquo;</code></p>

<p>Eventually, we will have an array of users, and ng-repeat is a way to iterate through the array.  And then we simply list the users names.</p>

<p>Next we have a form with an input field.  This input field has:</p>

<p><code>ng-model=&ldquo;newUser.name&rdquo;</code></p>

<p>This ng-model is almost like a variable in that we will be setting this ng-model to whatever we put in the input field.</p>

<p>Then we have a button that has:</p>

<p><code>ng-click=&ldquo;addUser()&rdquo;</code></p>

<p>We are attaching ng-click to the button and that will run an addUser function that we will have to create.  In the span element, you will see a double binded value of the input field.  When you are typing in text to the input field, it will show here.  It&rsquo;s more of a cool thing to have than necessary.  Now all we need is that angular controller.</p>

<figure class='code'><figcaption><span> (angularmodule.js)</span> <a href='http://stevenabrooks.github.io/downloads/code/angularmodule.js'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s2">&quot;User&quot;</span><span class="p">,</span> <span class="p">[</span><span class="s2">&quot;ngResource&quot;</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">UserController</span><span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">$resource</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">User</span> <span class="o">=</span> <span class="nx">$resource</span><span class="p">(</span><span class="s2">&quot;/users.json&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">$scope</span><span class="p">.</span><span class="nx">users</span> <span class="o">=</span> <span class="nx">User</span><span class="p">.</span><span class="nx">query</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">addUser</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">entry</span> <span class="o">=</span> <span class="nx">User</span><span class="p">.</span><span class="nx">save</span><span class="p">({</span><span class="nx">name</span><span class="o">:</span><span class="nx">$scope</span><span class="p">.</span><span class="nx">newUser</span><span class="p">.</span><span class="nx">name</span><span class="p">})</span>
</span><span class='line'>    <span class="nx">$scope</span><span class="p">.</span><span class="nx">users</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">entry</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">$scope</span><span class="p">.</span><span class="nx">newUser</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="s1">&#39;;&#39;</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>At the top, we create a module which we call &ldquo;User&rdquo;.  Going back to our layout file, we need to add this module to our directive.  That html element will now look like this:</p>

<p><code>html ng-app=&ldquo;User&rdquo;</code></p>

<p>To create a controller in Angular is like creating a javascript class, with a function.  We create it by adding in a scope.  A scope is an object that refers to the application model, kinda like self in ruby or this in javascript, but also not really.</p>

<p>In order to set our array, remember its called users in the view, we have to find a way to get that data of users from the database.  Remember when we added angular-resource to the application.js file, and remember when we added ngResource to our module?  We did this to set up Angular resource which allows you to interact with restful server side data source (our user controller in railsland).</p>

<p>In that first line we are saying, set the User variable to all the objects at the route &ldquo;/users.json&rdquo;.  The reason we cannot simply give the route of &ldquo;/users&rdquo; is because the return html and not json.  In the next line we set the scope.users to User.query().  The query function allows you to GET an array.</p>

<p>Awesome now all we want to do is add users to that array.  In the view, the button had an ng-click=&ldquo;addUser()&rdquo; on it.  We needed to create that function and we do it here.  Here we are getting the input from the form field with an ng-model of newUser.name and saving it to the object.  In angular, the .save method is used to create an object and not update it.  Then all we do is push that entry into the users array that we set above and set the input field to blank.</p>

<p>Now we can create an object and get an array of objects in a rails app that utilizes Angular.js on the client side.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Heroku, AWS, DNS Simple]]></title>
    <link href="http://stevenabrooks.github.io/blog/2013/12/27/push-to-heroku/"/>
    <updated>2013-12-27T09:25:00-05:00</updated>
    <id>http://stevenabrooks.github.io/blog/2013/12/27/push-to-heroku</id>
    <content type="html"><![CDATA[<p>Here&rsquo;s the scenario.  You have a site you created locally.  It has file uploading.  You have a domain name.  You don&rsquo;t want to take forever compiling assets and doing all that stuff to push the code to a server.</p>

<p>Okay, that&rsquo;s probably not a lay up that you have all those things.  But I had to find a way to get those images to same in production and find an easy way just to push the code to production.</p>

<p>To do this I used three things:</p>

<ol>
<li><a href="https://www.heroku.com/%E2%80%8E">Heroku</a></li>
<li><a href="http://aws.amazon.com/">AWS</a></li>
<li><a href="https://dnsimple.com/domains">DNS Simple</a></li>
</ol>


<p>Let&rsquo;s start from the top.  Heroku. Things to note here.  You have to use at least rails 3 and ruby 2.  I was not using ruby 2 so we have to go into our gemfile and add the line:</p>

<p>ruby &lsquo;2.0.0&rsquo;</p>

<p>and then run the bundler.  You might have an issue or two with other gems but the bundler usually tells you that you can do to fix it.</p>

<p>Now, Heroku also requires you use a Postgresql database in production, so we need to take our sqlite3 db and add it to the test and development groups on our gem file and add the &lsquo;pg&rsquo; gem to our production group.  Bundle it.  Okay Heroku is &ldquo;ready&rdquo;.</p>

<p>Now on to AWS.  This is where I will be storing my files that are uploaded to my application.  Since <a href="https://github.com/carrierwaveuploader/carrierwave">CarrierWave</a> is just hosting them locally, I will need a way for those files to work in production.  To set up AWS, you need to first go and create an account.  I&rsquo;m not going to tell you how to do that.  First, you need to add the &ldquo;fog&rdquo; gem to your gemfile and bundle.</p>

<p>Then make an initializer file.  Mine is called &ldquo;carrierwave.rb&rdquo; because I am using carrierwave for file processing.  Here is my initializer file:</p>

<p><img src="http://stevenabrooks.github.io/images/aws.png" alt="My params" /></p>

<p>Pretty simple all we have to do if add our aws_access_key_id, aws_secret_access_key, and our fog_directory.  Super simple, and now when we upload files they will be saved in our backer on S3.</p>

<p>Let throw it up on heroku and see what&rsquo;s going on.  Follow this tutorial if you don&rsquo;t know how to set yourself up on <a href="https://devcenter.heroku.com/articles/getting-started-with-rails3">Heroku</a>.  It&rsquo;s a joke how easy it is.</p>

<p>But now we have a app on Heroku and the files are storage on AWS so they will work in production, but now we want to use our super cool domain that we bought from GoDaddy.  No problem.  Enter <a href="https://dnsimple.com/domains">DNS Simple</a>.</p>

<p>We head to <a href="https://dnsimple.com/domains">DNS Simple</a>, and set up an account.  After we log in, we add a domain.  Then we go to services, and scroll down to Heroku and click on that.  Then we go back and click on the Advanced Editor where we see our domain with an ALIAS and CNAME.  Change the content of the ALIAS to your url (with the www) and the content of the CNAME to your heroku app&rsquo;s url.  This tells your domain to redirect everything to your heroku url.  Now head on back to heroku and go into the settings of your app.  GO down to url&rsquo;s and add the the cool url.</p>

<p>You have now successfully pushed an app to production, made the files work in production, and set up that code on your fancy url.  Nice</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Upload/Download in Rails]]></title>
    <link href="http://stevenabrooks.github.io/blog/2013/12/18/rails-upload-download/"/>
    <updated>2013-12-18T09:25:00-05:00</updated>
    <id>http://stevenabrooks.github.io/blog/2013/12/18/rails-upload-download</id>
    <content type="html"><![CDATA[<p>Okay I&rsquo;m back.  When we last left we had two request for the current app I&rsquo;m working on.  We nailed the first, now on to the second task.  We are supposed to allow the client to upload files so that people can download them from the app.  Again, no idea before I started.</p>

<p>Well here&rsquo;s something nice, I already am using <a href="https://github.com/carrierwaveuploader/carrierwave">CarrierWave</a> and feel pretty comfortable with it.  A thing to note is that most people assume this gem is only good for uploading images (likely due to the <a href="http://railscasts.com/episodes/253-carrierwave-file-uploads">Railscast episode</a>). It&rsquo;s not, actually its great for many files (I am currently upload .mp3, .mp4, .mov, and .wav files).</p>

<p>So I know how to upload the files, but how do you view the file or download it?</p>

<p>I stumbled upon how to view the file when I was trying to make it download:</p>

<p><img src="http://stevenabrooks.github.io/images/linkview.png" alt="My params" /></p>

<p>We are simply linking to where the upload attachment is.  Now for download:</p>

<p><img src="http://stevenabrooks.github.io/images/linkdownload.png" alt="My params" /></p>

<p>Here we are linking to the attachment url and downloading the file.  Not bad once you know how to do it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Acts_as_List With Active Admin]]></title>
    <link href="http://stevenabrooks.github.io/blog/2013/12/18/acts_as_list/"/>
    <updated>2013-12-18T09:23:00-05:00</updated>
    <id>http://stevenabrooks.github.io/blog/2013/12/18/acts_as_list</id>
    <content type="html"><![CDATA[<p>Today has been a great day for me thus far.  For the current site I am working on, the client requested two features recently:</p>

<p>1) Allow him to reposition images(order)</p>

<p>2) Allow him to upload files and have his clients view/download them</p>

<p>Cool.  Had no idea how to do either off the top of my head.  Let&rsquo;s try to tackle the first one.</p>

<p>On a high level, I was thinking this process should go something like this:</p>

<ul>
<li>See if an object had been updated</li>
<li>Find out which object that was</li>
<li>See the new position is has and if that position is already taken up</li>
<li>Track whether that object went up or down in position</li>
<li>Change the other positions accordingly</li>
</ul>


<p>Myself and <a href="https://twitter.com/aviflombaum">Avi</a> were actually constructing the code to write this whole thing out.  We started by writing a rails test:</p>

<p><img src="http://stevenabrooks.github.io/images/unittest.png" alt="My params" /></p>

<p>Here we are testing to see if we change the position of a studio, we need the other studios&#8217; positions to change accordingly.</p>

<p>Now here&rsquo;s the real issue, all of the CRUD of an object in this app is being done by <a href="http://www.activeadmin.info/">Active Admin</a>.  Actually I guess it wasn&rsquo;t so hard to know where to look to solve this problem…callbacks.</p>

<p>Cool we here the best this to do is the have a before_save callback.  We need to check if the  current object has been changed.  But wait, duh, there&rsquo;s this thing called <a href="https://github.com/swanandp/acts_as_list">acts_as_list</a> that does the reordering for you.  Luckily, this gem has a method (:insert_at(#)) that not only inserts the object where you want it but also reorders the list, doing the heavy lifting for us.</p>

<p>Great.  The idea that this process requires a before_save callback is right, and now we just need to connect the dots.  We must ask if a object has been changed, then insert it accordingly:</p>

<p><img src="http://stevenabrooks.github.io/images/beforefilter.png" alt="My params" /></p>

<p><img src="http://stevenabrooks.github.io/images/actslist.png" alt="My params" /></p>

<p>and bam, we can change any object to have a different position and the rest of the positions are reordered, and it works with Active Admin.  Check.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FancyBox Gallery Trix]]></title>
    <link href="http://stevenabrooks.github.io/blog/2013/12/10/fancybox-gallery/"/>
    <updated>2013-12-10T10:23:00-05:00</updated>
    <id>http://stevenabrooks.github.io/blog/2013/12/10/fancybox-gallery</id>
    <content type="html"><![CDATA[<p>Cool, so one of the features my latest client is asking me to do is adding is an image gallery of their studios.  After searching around for a little bit, I stumbled upon the <a href="https://github.com/hecticjeff/fancybox-rails">Fancybox Rails</a> gem.  Cool, let&rsquo;s check it out.</p>

<p>This gem is great, it adds all the assets required for <a href="http://fancybox.net/">Fancybox</a> to your assets, and all you have to do is add:</p>

<p>//= require fancybox</p>

<p>to your application.js file and:</p>

<p>*= require fancy box</p>

<p>to your application.css file.</p>

<p>Awesome.  Now that all of that is squared away, let&rsquo;s get to work.  In our controller we are working with this array:</p>

<p><img src="http://stevenabrooks.github.io/images/galleryall.png" alt="My params" /></p>

<p>This is an array of all the pictures we are working with.  If we want to loop through all of these, we use the following code:</p>

<p><img src="http://stevenabrooks.github.io/images/fancyloop.png" alt="My params" /></p>

<p>If we throw on a little jQuery, we get a workable Fancybox:</p>

<p><img src="http://stevenabrooks.github.io/images/fancycode.png" alt="My params" /></p>

<p>What happens here is were are looking through all the paintings in the gallery and setting them to the same :rel.  This allows Fancybox to know all images with :rel &ldquo;studio_images&rdquo; is to be grouped together in a gallery.</p>

<p>The problem here is that we now have eight links, with all eight links opening up to the same gallery.  That&rsquo;s not good, we want one link to open to all of the images in the gallery.  Cool, let&rsquo;s solve this problem.</p>

<p>How about we make two instance variables in the controller, one for the first image, and one for the rest, this way if we ever delete the first image, another will replace it.  The benefit here is that there will be no image duplication because between the two arrays, we will have all the images, but no duplicates.</p>

<p><img src="http://stevenabrooks.github.io/images/fancycontroller.png" alt="My params" /></p>

<p>So now we have these two variable, and we need to make a link in the view to open the gallery.  Let&rsquo;s do that:</p>

<p><img src="http://stevenabrooks.github.io/images/click_thing.png" alt="My params" /></p>

<p>If you have noticed, both lines of code have different id&rsquo;s, can you guess why?  If we have both lines of code, we will have eight different links.  We only want one link, let&rsquo;s hide the second array.</p>

<p><img src="http://stevenabrooks.github.io/images/fancyhide.png" alt="My params" /></p>

<p>And you are left with one link which points to all the images in your gallery, good work.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Highlight Current Page Rails]]></title>
    <link href="http://stevenabrooks.github.io/blog/2013/12/10/highlight-current-page-rails/"/>
    <updated>2013-12-10T09:23:00-05:00</updated>
    <id>http://stevenabrooks.github.io/blog/2013/12/10/highlight-current-page-rails</id>
    <content type="html"><![CDATA[<p>I&rsquo;ll admit, I am not an authority figure when it comes to front end.  I&rsquo;m not talking about things like <a href="http://getbootstrap.com/">Bootstrap</a>, I&rsquo;m talking about getting super down and dirty within a stylesheet.</p>

<p>I had a fun little problem to solve yesterday when working on the site for my current client.  The client wanted the page the user was currently on to be highlighted in the navbar.</p>

<p>I immediately thought to add some sort of conditional, but went strait to <a href="http://stackoverflow.com/">Stack Overflow</a> to see what programmers before me have done.</p>

<p>Turns out, there are two ways you can do something like this.  In both scenarios, we are going to create a helper method, but the helper method can check different things.</p>

<p>For those who are not making a navbar dynamically, I would suggest using the following:</p>

<p><img src="http://stevenabrooks.github.io/images/controllermethod.png" alt="My params" /></p>

<p><img src="http://stevenabrooks.github.io/images/controllercode.png" alt="My params" /></p>

<p>This way, you can have the helper method return some thing (in this case, the name of the new class) depending on what controller the request is using.</p>

<p>If you are going to dynamically create the navbar, I suggest you do something like this:</p>

<p><img src="http://stevenabrooks.github.io/images/pathmethod.png" alt="My params" /></p>

<p><img src="http://stevenabrooks.github.io/images/pathcode.png" alt="My params" /></p>

<p>This way, the helper is checking the request url, and simply passing in the path.  I actually found this second way of doing this buggy because the root path becomes highlighted for all the other paths.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Serialize Attributes]]></title>
    <link href="http://stevenabrooks.github.io/blog/2013/12/09/serializing-model-attributes/"/>
    <updated>2013-12-09T09:23:00-05:00</updated>
    <id>http://stevenabrooks.github.io/blog/2013/12/09/serializing-model-attributes</id>
    <content type="html"><![CDATA[<p>So after I successfully jail-rigged my blog, I can now make new posts.  I have a bunch that I want to talk about, but one I wanted touch on today was serializing attributes for a model.</p>

<p>Here is the scenario.  One of the index pages for my currently client lists all the items they have available for rent (it&rsquo;s a music company).  They have microphones, computers, instruments, anything you could rent.  It&rsquo;s probably about 10 different categories of products that a customer can rent.</p>

<p>I built the back end with <a href="http://www.activeadmin.info/">ActiveAdmin</a> so the client can easily change the content of the site.  The previous developer had hard coded all of the content, and the client was not comfortable going into the actual code to make changes.</p>

<p>So we have a rental page that lists all the items for rent.  Because there are 10 different categories of items, do I want to make 10 different models and do the proper associations, or because the items only have names do I want to come up with something else?</p>

<p>I found out that I could serialize an attribute in rails.  Its super simple:</p>

<p><img src="http://stevenabrooks.github.io/images/serialize.png" alt="My params" /></p>

<p>What we are doing his is simple, rather than creating a whole nothing model and creating the association, this model (staff), can have many titles, but those titles cannot have many attributes.</p>

<p>This was a really good way for allow the client to add many single attribute attributes to a model.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Test]]></title>
    <link href="http://stevenabrooks.github.io/blog/2013/12/06/test/"/>
    <updated>2013-12-06T00:00:00-05:00</updated>
    <id>http://stevenabrooks.github.io/blog/2013/12/06/test</id>
    <content type="html"><![CDATA[<p>If this works I have figured out how to jail rig posts.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I'm Back]]></title>
    <link href="http://stevenabrooks.github.io/blog/2013/11/25/im-back/"/>
    <updated>2013-11-25T17:08:00-05:00</updated>
    <id>http://stevenabrooks.github.io/blog/2013/11/25/im-back</id>
    <content type="html"><![CDATA[<p>Dear Everyone Who Has Read My Blog,</p>

<p>According to my watch, it should have been about two months since I last blogged.  These past two months have been a very challenging time for me as my father recently passed away.</p>

<p>I will be starting up my blog again soon as within the last week or so I have been able to get back to programming.  One of the things I have been working on has been speeding up my Workout App and adding Eager Loading into my application.  Thus far I have eliminated a little over 60% of my queries.</p>

<p>Actually it&rsquo;s probably better I do some stuff now.  In my Workout App the individual workouts #show page has a visual representation of a users workout through the Google Charts.  Originally, my #show action looked like this:</p>

<p><img src="http://stevenabrooks.github.io/images/firstshow.png" alt="My params" /></p>

<p>Very strait forward, I had created a :graph method that would all the charts to work.  When I do this, here is what the queries look like:</p>

<p><img src="http://stevenabrooks.github.io/images/firstquery.png" alt="My params" /></p>

<p>Yuck, that&rsquo;s 18 queries, and although it&rsquo;s not very slow on my current app, if this workout had more than a few exercises with a few sets, it could be much slower.</p>

<p>Then I started looking into Eager Loading, which allowed me to turn my #show action into:</p>

<p><img src="http://stevenabrooks.github.io/images/secondshow.png" alt="My params" /></p>

<p>Here, I am loading the routine for the action, that routine belongs to a user and has many lifts.  Those lifts belong to an exercise and have many infos.  So now when I Eager Load into the instance of routine and run the :graph method, we get this:</p>

<p><img src="http://stevenabrooks.github.io/images/secondquery.png" alt="My params" /></p>

<p>Just 5 queries.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Lot to Come Ahead]]></title>
    <link href="http://stevenabrooks.github.io/blog/2013/10/07/a-lot-to-come-ahead/"/>
    <updated>2013-10-07T18:08:00-04:00</updated>
    <id>http://stevenabrooks.github.io/blog/2013/10/07/a-lot-to-come-ahead</id>
    <content type="html"><![CDATA[<p>Everyone,</p>

<p>Unfortunately that last few days I have not been able to update my blog due to a family emergency.  The good news is that I have still been finding a few hours here and there to get some coding work in.  In the past few days I have authenticated users with Devise and Omiauth (together) as well as added the Letsrate gem to my workout application (allowing each exercise to have a 5 star rating).  I plan on writing at least 2 post from these topics when I get a chance.  I also spun up an app with the ActiveAdmin gem but I will only be giving a link to the pseudo (a little outdated) blog I followed for it.  I will also be added a post for some of the gotcha&rsquo;s I encountered while setting up Rspec and FactoryGirl today.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Push It Real Good]]></title>
    <link href="http://stevenabrooks.github.io/blog/2013/10/05/push-it-real-good/"/>
    <updated>2013-10-05T18:23:00-04:00</updated>
    <id>http://stevenabrooks.github.io/blog/2013/10/05/push-it-real-good</id>
    <content type="html"><![CDATA[<p>Real quick post today on deployment.</p>

<p>The apps I made thus far have all been deployed following these guidelines:</p>

<p><a href="http://stackoverflow.com/">Spike Grobstein = Beast</a></p>

<p>If you were able to successfully deploy your rails app to production via Capistrano you have done all the heavy lifting already.  If you make new changes that you would like to push to the server all you have to do is <a href="https://twitter.com/Chris_GonzGonz">thanks for my boy Chris Gonzales</a>:</p>

<ol>
<li>Go into your public folder on your local machine and write the command:</li>
</ol>


<p>cap deploy:setup</p>

<ol>
<li>Follow it up by the command:</li>
</ol>


<p>cap deploy</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ransack]]></title>
    <link href="http://stevenabrooks.github.io/blog/2013/10/01/ransack/"/>
    <updated>2013-10-01T09:27:00-04:00</updated>
    <id>http://stevenabrooks.github.io/blog/2013/10/01/ransack</id>
    <content type="html"><![CDATA[<p>Yesterday I worked on another search gem this time being <a href="https://github.com/ernie/ransack">Ransack</a>.  In <a href="https://outlinked.flatironschool.com">Outlinked</a> we used Sunspot (who I&rsquo;m not even going to give a link to) which I will never use again.  I was very pleased with how Ransack went and how easy it was to use as well as have dynamic searching.</p>

<p>Ransack was very strait forward.  This is what my html.erb file looked like.  This allowed a user to continue to drill down their search (dynamic):</p>

<p><img src="http://stevenabrooks.github.io/images/ransack_view.png" alt="My params" /></p>

<p>Then you go into the controller and set your instance variable to the results of the search:</p>

<p><img src="http://stevenabrooks.github.io/images/ransack_controller.png" alt="My params" /></p>

<p>And bam, you get a nice dynamic search (I&rsquo;m wondering if these drop downs can be autompletes, that would probable make the UX a little better):</p>

<p><img src="http://stevenabrooks.github.io/images/ransack.png" alt="My params" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails DataTables]]></title>
    <link href="http://stevenabrooks.github.io/blog/2013/09/30/some-searching/"/>
    <updated>2013-09-30T14:43:00-04:00</updated>
    <id>http://stevenabrooks.github.io/blog/2013/09/30/some-searching</id>
    <content type="html"><![CDATA[<p>As my last post stated, I was planning on doing some work on searches in rails.  I have done two of them so far today with the first being Data Tables and the second being Ransack.</p>

<p>Datatables is pretty cool.  It&rsquo;s not necessarily just search but it looks like a really cool admin feature.  You can search any of the column, sort any of the columns, and have pagination really easily.</p>

<p>You are out by adding the gem then once you do that you simply give the table you are trying to sort an ID.</p>

<p><img src="http://stevenabrooks.github.io/images/datatables_view.png" alt="My params" /></p>

<p>Then go into the corresponding JS file and add a little snippet:</p>

<p><img src="http://stevenabrooks.github.io/images/datatables_js.png" alt="My params" /></p>

<p>And magically this shows up:</p>

<p><img src="http://stevenabrooks.github.io/images/datatables.png" alt="My params" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Searching Today]]></title>
    <link href="http://stevenabrooks.github.io/blog/2013/09/30/searching-today/"/>
    <updated>2013-09-30T10:42:00-04:00</updated>
    <id>http://stevenabrooks.github.io/blog/2013/09/30/searching-today</id>
    <content type="html"><![CDATA[<p>I&rsquo;m going to try to start something new on my blog.  Unfortunately the last few weeks I haven&rsquo;t been able to code as much as I would have liked to (most of my time has been spent networking, interviewing, etc).  So now I&rsquo;d like do a few hours a day of different rails features and log what went on here on my blog.  Today I&rsquo;m going to work on search which will include manual search as well as some of the gems such as Sunspot.  Ttyl.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[It's Been a While]]></title>
    <link href="http://stevenabrooks.github.io/blog/2013/09/25/its-been-a-while/"/>
    <updated>2013-09-25T11:55:00-04:00</updated>
    <id>http://stevenabrooks.github.io/blog/2013/09/25/its-been-a-while</id>
    <content type="html"><![CDATA[<p>Dear Everyone,</p>

<p>I&rsquo;m sorry.  It&rsquo;s been a while since I last blogged.  I graduated The Flatiron School a few weeks ago and am currently running all over the joint trying to find a great job with an awesome company.  Rather than blogging, my days have been spend networking, interviewing, and running around like a mad man.</p>

<p>In the next few days I would like to highlight some of the things I have been working on (I have been trying out a lot of ruby gems).</p>

<p>Till then, have a good one,
Steven</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learned a Little About Notation Today]]></title>
    <link href="http://stevenabrooks.github.io/blog/2013/08/28/learned-a-little-about-notation-today/"/>
    <updated>2013-08-28T10:49:00-04:00</updated>
    <id>http://stevenabrooks.github.io/blog/2013/08/28/learned-a-little-about-notation-today</id>
    <content type="html"><![CDATA[<p>So today I learned something drastically new.  One of my classmates, who just happens to be a beast at programming, went to an interview yesterday for a very prominent company here in New York.  They asked him a lot of CS questions because this was not for a junior position, and lucky, besides the fact that my friend is just really smart, he had a background in CS.  So he smoked some of these questions.</p>

<p>One of the things he thought I should have a grasp on was <a href="http://en.wikipedia.org/wiki/Big_O_notation">O Notation</a>.  Now what I am about to say is me trying to replay the 20 minutes conversation I had with my classmate this morning.</p>

<p>O(1) describes an algorithm that will always execute in the same time (or space) regardless of the size of the input data set.</p>

<p>O(N) describes an algorithm whose performance will grow linearly and in direct proportion to the size of the input data set.</p>

<p>O(N2) represents an algorithm whose performance is directly proportional to the square of the size of the input data set.</p>

<p>O(2N) denotes an algorithm whose growth will double with each additional element in the input data set.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Controller Scope]]></title>
    <link href="http://stevenabrooks.github.io/blog/2013/08/26/controller-scope/"/>
    <updated>2013-08-26T20:22:00-04:00</updated>
    <id>http://stevenabrooks.github.io/blog/2013/08/26/controller-scope</id>
    <content type="html"><![CDATA[<p>Well I had two interviews today&hellip;and on the second interview I had a questions to which i did not get the full answer to.</p>

<p>The question was, &ldquo;why should we abstract methods out of the controller and put them into the model in rails?&rdquo;  Actually i think the question was worded a little different but that&rsquo;s pretty close.</p>

<p>I answered by claiming that you want to abstract methods into the model because a messy controller would be difficult for another programmer to read your code.  Now that isn&rsquo;t wrong, but it isn&rsquo;t right either.</p>

<p>The full correct answer has to do with scope, and after some help from the friendly interviewer I was able to get the answer.   If you create a method in the controller it&rsquo;s scope is just to that specific controller.  If you make a method in the model not only does its controller and view had access to those methods but so do all the other models.</p>

<p>The scope I was introduced to in the past 12 weeks was variable scope, etc.  So this was a fun problem to work through.</p>

<p>You learn something new everyday&hellip;or at least you should try.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Graduated]]></title>
    <link href="http://stevenabrooks.github.io/blog/2013/08/26/graduated/"/>
    <updated>2013-08-26T08:27:00-04:00</updated>
    <id>http://stevenabrooks.github.io/blog/2013/08/26/graduated</id>
    <content type="html"><![CDATA[<p>Last Friday, myself and 31 other students graduated from <a href="http://flatironschool.com/">The Flatiron School</a>.  It was a fantastic 12 weeks and an excellent start to my programming career.  We also Karaoke&rsquo;d a lot Friday night and I still don&rsquo;t have much of a voice so that probably won&rsquo;t help all my interviews this week.</p>

<p>Either way I wanted to make a quick post today about some of my goals for the near future.</p>

<p>I feel strong with ruby, I feel I can make anything in ruby, but I also feel weak specifically in meta programming ruby.  So on my current to-do list, meta programming in ruby is for certain up there at the top.</p>

<p>Although I spent a good amount of time blogging about and working on my <a href="http://192.241.139.122/">Workout App</a>, I have decided to put that on the back burner for a while.  One of the things I got out of working on this application was the javascript and jQuery work.  Those are also very high on my list.  Last week I completed the first section of the <a href="http://www.codeavengers.com/">Code Avenger&rsquo;s</a> javascript tutorial.  I have to say this style of tutorial blows all other tutorials out of the water.  Because I know ruby I really needed a javascript tutorial which would be a stickler on syntax.  Avengers is very good at that and I just wish they would create third level for javascript which is supposed to focus on objects, GUI&rsquo;s, and events.</p>

<p>Another thing that is high on my list is blogging. As I get heavy into the interviewing process there will be questions I am asked to which I do not know the answer to.  I would like to blog about specific questions that I do not know the answer to.</p>
]]></content>
  </entry>
  
</feed>
